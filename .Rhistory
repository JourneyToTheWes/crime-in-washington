nrow(filter(Independent, Vote == 'Nay')))
voted.yea <- c(nrow(filter(Democrats, Vote == 'Yea')), nrow(filter(Republican, Vote == 'Yea')) ,
nrow(filter(Independent, Vote == 'Yea')))
df <- data.frame(party, total.num, voted.nay, voted.yea, stringsAsFactors=FALSE)
df.nay <- filter(df, voted.nay- voted.yea >0)
df.nay <- mutate(df.nay, majority = "Nay")
df.yea <- filter(df, voted.nay- voted.yea <0)
df.yea <- mutate(df.yea, majority = "Yea")
total <- rbind(df.nay, df.yea)
View(total)
total <- mutate(total, num.majority = select(total, colnames(total)== majority))
query.params<- list(roll_id = roll.id , fields = "voters")
knitr::opts_chunk$set(echo = FALSE)
library("httr")
library("jsonlite")
library("dplyr")
library("knitr")
zip.code <- "98059"
search.query <- "health"
roll.id <- "s20-2017"
zip.code <- "98059"
base.uri <- "https://congress.api.sunlightfoundation.com"
resource <- paste0("/legislators/locate?zip=", zip.code)
response <- GET(paste0(base.uri, resource))
body <- content(response, "text")
legislators <- fromJSON(body)
legislators <- legislators$result
legislators <- select(legislators, first_name, last_name, state, party, phone, chamber)
num.row <- nrow(legislators)
legis.info<- function(row){
state.party <- paste0("(", legislators$state[row], "-", legislators$party[row],").")
info <- paste(legislators$first_name[row], legislators$last_name[row],
state.party, "Phone:", legislators$phone[row],legislators$chamber[row])
return(info)
}
num.senate <- filter(legislators, chamber == "senate")
num.senate <- nrow(num.senate)
num.representative <- filter(legislators, chamber == "house")
num.representative <- nrow(num.representative)
query.params <- list(keywords = search.query, per_page = "25", order ="introduced_on")
resource <- paste0("/bills", "/search")
response <- GET(paste0(base.uri, resource), query = query.params)
health.care <- fromJSON(content(response, "text"))
health.care <- flatten(health.care$results)
health.care <- mutate(health.care, congress.url = paste("[link](", urls.congress, ")"))
health.care <- select(health.care, bill_id, introduced_on, official_title, congress.url)
colnames(health.care) <- c("Bill", "Date Introduced", "Title", "URL")
query.params<- list(roll_id = roll.id , fields = "voters")
resource <- "/votes"
response <- GET(paste0(base.uri, resource), query = query.params)
#use the content() function from httr library and access and retrieve the response (a list!)
request.body.as.list <- content(response)
#accest the "result" part of the list, and the first element, and access "voters"
voters.list <- request.body.as.list$results[[1]]$voters
#set the names of voter.list object to NULL
names(voters.list) <- NULL
#convert R object voters.list to json object
voters.json <- toJSON(voters.list)
#convert voters.json into R structure, and use flatten from library jsonlite to make
#a data tabke
voters.as.data.frame <- flatten(fromJSON(voters.json, flatten=TRUE))
voters.as.data.frame <- select(voters.as.data.frame, vote, voter.first_name, voter.last_name,
voter.gender, voter.party, voter.chamber)
colnames(voters.as.data.frame) <- c("Vote", "First Name", "Last Name", "Gender", "Party", "Chamber")
Independent <- filter(voters.as.data.frame, Party == "I")
num.independent <- nrow(Independent)
Republican <- filter(voters.as.data.frame, Party == "R")
num.Republican <- nrow(Republican)
Democrats <- filter(voters.as.data.frame, Party == "D")
num.Democrats <- nrow(Democrats)
party <- c("D", "R", "I")
total.num <- c(num.Democrats, num.Republican, num.independent)
num.rep <- c(num.Democrats, num.Republican, num.independent)
voted.nay <- c(nrow(filter(Democrats, Vote == 'Nay')), nrow(filter(Republican, Vote == 'Nay')) ,
nrow(filter(Independent, Vote == 'Nay')))
voted.yea <- c(nrow(filter(Democrats, Vote == 'Yea')), nrow(filter(Republican, Vote == 'Yea')) ,
nrow(filter(Independent, Vote == 'Yea')))
df <- data.frame(party, total.num, voted.nay, voted.yea, stringsAsFactors=FALSE)
df.nay <- filter(df, voted.nay- voted.yea >0)
df.nay <- mutate(df.nay, majority = "Nay")
df.yea <- filter(df, voted.nay- voted.yea <0)
df.yea <- mutate(df.yea, majority = "Yea")
total <- rbind(df.nay, df.yea)
colnames(total) <- c("Party", "Total", "Nay", "Yea", "Majority")
left_join(health.care, total)
source('~/.active-rstudio-document', echo=TRUE)
View(health.care)
left_join(voters.as.data.frame, total, by = c(""))
left_join(voters.as.data.frame, total)
View(voters.as.data.frame)
left_join(voters.as.data.frame, total, by =c("Party" = "party"))
left_join(voters.as.data.frame, total, by= c("Party" = "party"))
Party <- c("D", "R", "I")
total.num <- c(num.Democrats, num.Republican, num.independent)
num.rep <- c(num.Democrats, num.Republican, num.independent)
voted.nay <- c(nrow(filter(Democrats, Vote == 'Nay')), nrow(filter(Republican, Vote == 'Nay')) ,
nrow(filter(Independent, Vote == 'Nay')))
voted.yea <- c(nrow(filter(Democrats, Vote == 'Yea')), nrow(filter(Republican, Vote == 'Yea')) ,
nrow(filter(Independent, Vote == 'Yea')))
df <- data.frame(Party, total.num, voted.nay, voted.yea, stringsAsFactors=FALSE)
df.nay <- filter(df, voted.nay- voted.yea >0)
df.nay <- mutate(df.nay, majority = "Nay")
df.yea <- filter(df, voted.nay- voted.yea <0)
df.yea <- mutate(df.yea, majority = "Yea")
total <- rbind(df.nay, df.yea)
left_join(voters.as.data.frame, total, by= c("Party" = "party"))
left_join(voters.as.data.frame, total)
left_join(, total, voters.as.data.frame)
left_join(total, voters.as.data.frame)
full_join(total, voters.as.data.frame)
inner_join(total, voters.as.data.frame)
full_join(total, voters.as.data.frame)
a<- select(voters.as.data.frame, Party, Vote)
View(a)
voters.as.data.frame <- select(voters.as.data.frame, vote, voter.first_name, voter.last_name,
voter.gender, voter.party, voter.chamber)
colnames(voters.as.data.frame) <- c("Vote", "First Name", "Last Name", "Gender", "Party", "Chamber")
health.care <- flatten(health.care$results)
health.care <- mutate(health.care, congress.url = paste("[link](", urls.congress, ")"))
health.care <- select(health.care, bill_id, introduced_on, official_title, congress.url)
query.params<- list(roll_id = "s20-2017", fields = "voters")
resource <- "/votes"
source('~/.active-rstudio-document', echo=TRUE)
View(a)
voters.as.data.frame <- select(voters.as.data.frame, vote, voter.first_name, voter.last_name,
voter.gender, voter.party, voter.chamber)
knitr::opts_chunk$set(echo = FALSE)
##load
library("httr")
library("jsonlite")
library("dplyr")
library("knitr")
##set up variables for the report
zip.code <- "98059"
search.query <- "health"
roll.id <- "s20-2017"
query.params<- list(roll_id = roll.id , fields = "voters")
resource <- "/votes"
response <- GET(paste0(base.uri, resource), query = query.params)
#use the content() function from httr library and access and retrieve the response (a list!)
request.body.as.list <- content(response)
#accest the "result" part of the list, and the first element, and access "voters"
voters.list <- request.body.as.list$results[[1]]$voters
#set the names of voter.list object to NULL
names(voters.list) <- NULL
#convert R object voters.list to json object
voters.json <- toJSON(voters.list)
#convert voters.json into R structure, and use flatten from library jsonlite to make
#a data tabke
voters.as.data.frame <- flatten(fromJSON(voters.json, flatten=TRUE))
voters.as.data.frame <- select(voters.as.data.frame, vote, voter.first_name, voter.last_name,
voter.gender, voter.party, voter.chamber)
colnames(voters.as.data.frame) <- c("Vote", "First Name", "Last Name", "Gender", "Party", "Chamber")
Independent <- filter(voters.as.data.frame, Party == "I")
num.independent <- nrow(Independent)
Republican <- filter(voters.as.data.frame, Party == "R")
num.Republican <- nrow(Republican)
Democrats <- filter(voters.as.data.frame, Party == "D")
num.Democrats <- nrow(Democrats)
party <- c("D", "R", "I")
total.num <- c(num.Democrats, num.Republican, num.independent)
num.rep <- c(num.Democrats, num.Republican, num.independent)
voted.nay <- c(nrow(filter(Democrats, Vote == 'Nay')), nrow(filter(Republican, Vote == 'Nay')) ,
nrow(filter(Independent, Vote == 'Nay')))
voted.yea <- c(nrow(filter(Democrats, Vote == 'Yea')), nrow(filter(Republican, Vote == 'Yea')) ,
nrow(filter(Independent, Vote == 'Yea')))
df <- data.frame(party, total.num, voted.nay, voted.yea, stringsAsFactors=FALSE)
df.nay <- filter(df, voted.nay- voted.yea >0)
df.nay <- mutate(df.nay, majority = "Nay")
df.yea <- filter(df, voted.nay- voted.yea <0)
df.yea <- mutate(df.yea, majority = "Yea")
total <- rbind(df.nay, df.yea)
colnames(total) <- c("Party", "Total", "Nay", "Yea", "Majority")
request.body.as.list <- content(response)
voters.list <- request.body.as.list$results[[1]]$voters
names(voters.list) <- NULL
voters.json <- toJSON(voters.list)
voters.as.data.frame <- flatten(fromJSON(voters.json, flatten=TRUE))
voters.as.data.frame <- select(voters.as.data.frame, vote, voter.first_name, voter.last_name,
voter.gender, voter.party, voter.chamber)
colnames(voters.as.data.frame) <- c("Vote", "First Name", "Last Name", "Gender", "Party", "Chamber")
Independent <- filter(voters.as.data.frame, Party == "I")
num.independent <- nrow(Independent)
Republican <- filter(voters.as.data.frame, Party == "R")
num.Republican <- nrow(Republican)
Democrats <- filter(voters.as.data.frame, Party == "D")
num.Democrats <- nrow(Democrats)
Party <- c("D", "R", "I")
total.num <- c(num.Democrats, num.Republican, num.independent)
num.rep <- c(num.Democrats, num.Republican, num.independent)
voted.nay <- c(nrow(filter(Democrats, Vote == 'Nay')), nrow(filter(Republican, Vote == 'Nay')) ,
nrow(filter(Independent, Vote == 'Nay')))
voted.yea <- c(nrow(filter(Democrats, Vote == 'Yea')), nrow(filter(Republican, Vote == 'Yea')) ,
nrow(filter(Independent, Vote == 'Yea')))
df <- data.frame(Party, total.num, voted.nay, voted.yea, stringsAsFactors=FALSE)
df.nay <- filter(df, voted.nay- voted.yea >0)
df.nay <- mutate(df.nay, majority = "Nay")
df.yea <- filter(df, voted.nay- voted.yea <0)
df.yea <- mutate(df.yea, majority = "Yea")
total <- rbind(df.nay, df.yea)
a<- select(voters.as.data.frame, Party, Vote)
View
View(voters.as.data.frame)
a<- select(voters.as.data.frame, Party, Vote)
View(a)
left_join(a, total)
mutate(voters.as.data.frame, for_majority)
mutate(voters.as.data.frame, for_majority== "")
mutate(voters.as.data.frame, for_majority== " ")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
mutate(voters.as.data.frame, for_majority = " ")
a <- mutate(voters.as.data.frame, for_majority = " ")
View(a)
a <- mutate(voters.as.data.frame, for_majority = tota)
a <- mutate(voters.as.data.frame, for_majority = total)
voters.as.data.frame$Party
a <- mutate(voters.as.data.frame, for_majority = voters.as.data.frame$Party == voters.as.data.frame$Vote)
View(voters.as.data.frame$Party)
vec1<- voters.as.data.frame$Party
vec1
is.list(vec1)
a <- mutate(voters.as.data.frame, for_majority = "Yea")
a <- mutate(voters.as.data.frame, for_majority = "TRUE")
a <- mutate(voters.as.data.frame, for_majority = if(Vote == Year){return TRUE})
total2<- merge(voters.as.data.frame, total)
sort.list(voters.as.data.frame)
sort(voters.as.data.frame)
total2<- merge(voters.as.data.frame, total)
total2<- merge(voters.as.data.frame, total, by = c(Party))
total2<- merge(voters.as.data.frame, total, by = c("Party"Party))
total2<- merge(voters.as.data.frame, total, by = c("Party"))
sort.list(total)
sort.list(voters.as.data.frame)
library(shiny)
library(ggplot2)
library(dplyr)
sample_n(diamonds)
sample_n(diamonds, 3000)
range(diamonds)
range(diamonds, carat, price)
range(diamonds, 'carat')
View(diamonds)
range(carat)
range('carat'
)
range(diamonds, 'carat')
diamonds.sample <- sample_n(diamonds, 3000)
range(diamonds.sample, 'carat', 'price')
range(diamonds.sample, 'carat')
range(diamond$carat)
range(diamonds$carat)
range(diamonds$price)
carat.range <- range(diamonds$carat)
price.range <- range(diamonds$price)
carat.range
runApp('info201/module15-shiny/exercise-2')
runApp('info201/module15-shiny/exercise-2')
runApp('info201/module15-shiny/exercise-2')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='josh3396', token='8A93B176B86DE12ED76A1DF117A60371', secret='sT9OPJHeeshWO0L86zGDgCg45YAq/W54WCNOUAtA')
rsconnect::setAccountInfo(name='josh3396', token='8A93B176B86DE12ED76A1DF117A60371', secret='sT9OPJHeeshWO0L86zGDgCg45YAq/W54WCNOUAtA')
rsconnect::setAccountInfo(name='josh3396',
token='8A93B176B86DE12ED76A1DF117A60371',
secret='<SECRET>')
rsconnect::setAccountInfo(name='josh3396', token='8A93B176B86DE12ED76A1DF117A60371', secret='sT9OPJHeeshWO0L86zGDgCg45YAq/W54WCNOUAtA')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
server<- function(input, output) {
filtered <- reactive({
data <- wa.average.crime %>%
filter(Average_Population > input$population[1] & Average_Population < input$population[2]) %>%
filter(Average_Burglary > input$burglary[1] & Average_Burglary< input$burglary[2])
return(data)
})
output$plot <- renderPlot({
p <- ggplot(data = filtered(), mapping = aes(x= Average_Population, y= Average_Burglary)) +
geom_point() +
facet_wrap(input$facet.by)
if(input$smooth) {
p <- p + geom_smooth(se = FALSE)
}
return(p)
})
}
ui <- fluidPage(
titlePanel(title = "Crime in Washington"),
sidebarLayout(
sidebarPanel(
sliderInput('burglary', label="burglary", min=burgl[1], max=burgl[2], value= burgl),
sliderInput('population', label="population", min= pop[1], max=pop[2], value= pop)
),
mainPanel(
h5("Crime in Washington is different in each county."),
plotOutput('plot')
)
)
)
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel(title = "Crime in Washington"),
sidebarLayout(
sidebarPanel(
sliderInput('burglary', label="burglary", min=burgl[1], max=burgl[2], value= burgl),
sliderInput('population', label="population", min= pop[1], max=pop[2], value= pop)
),
mainPanel(
h5("Crime in Washington is different in each county."),
plotOutput('plot')
)
)
)
burgl <- range(wa.average.crime$Average_Burglary)
pop <- range(wa.average.crime$Average_Population)
ui <- fluidPage(
titlePanel(title = "Crime in Washington"),
sidebarLayout(
sidebarPanel(
sliderInput('burglary', label="burglary", min=burgl[1], max=burgl[2], value= burgl),
sliderInput('population', label="population", min= pop[1], max=pop[2], value= pop)
),
mainPanel(
h5("Crime in Washington is different in each county."),
plotOutput('plot')
)
)
)
burgl <- range(wa.average.crime$Average_Burglary)
ucr.wa.crime.data <- read.csv("data/ucr.wa.crime.data.csv")
wa.average.crime <- read.csv("data/wa.average.crime.csv")
burgl <- range(wa.average.crime$Average_Burglary)
pop <- range(wa.average.crime$Average_Population)
ucr.wa.crime.data <- read.csv("data/ucr.wa.crime.data.csv")
getwd()
setwd("~/info201/crime-in-washington")
getwd()
ucr.wa.crime.data <- read.csv("data/ucr.wa.crime.data.csv")
wa.average.crime <- read.csv("data/wa.average.crime.csv")
burgl <- range(wa.average.crime$Average_Burglary)
pop <- range(wa.average.crime$Average_Population)
library(dplyr)
library(shiny)
ui <- fluidPage(
titlePanel(title = "Crime in Washington"),
sidebarLayout(
sidebarPanel(
sliderInput('burglary', label="burglary", min=burgl[1], max=burgl[2], value= burgl),
sliderInput('population', label="population", min= pop[1], max=pop[2], value= pop)
),
mainPanel(
h5("Crime in Washington is different in each county."),
plotOutput('plot')
)
)
)
server<- function(input, output) {
filtered <- reactive({
data <- wa.average.crime %>%
filter(Average_Population > input$population[1] & Average_Population < input$population[2]) %>%
filter(Average_Burglary > input$burglary[1] & Average_Burglary< input$burglary[2])
return(data)
})
output$plot <- renderPlot({
p <- ggplot(data = filtered(), mapping = aes(x= Average_Population, y= Average_Burglary)) +
geom_point() +
facet_wrap(input$facet.by)
if(input$smooth) {
p <- p + geom_smooth(se = FALSE)
}
return(p)
})
}
runApp()
runApp()
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
p <- ggplot(data = filtered(), mapping = aes(x= population, y= burglary)) +
geom_point() +
facet_wrap(input$facet.by)
filtered <- reactive({
data <- wa.average.crime %>%
filter(Average_Population > input$population[1] & Average_Population < input$population[2]) %>%
filter(Average_Burglary > input$burglary[1] & Average_Burglary< input$burglary[2])
return(data)
})
output$plot <- renderPlot({
p <- ggplot(data = filtered(), mapping = aes(x= population, y= burglary)) +
geom_point() +
facet_wrap(input$facet.by)
if(input$smooth) {
p <- p + geom_smooth(se = FALSE)
}
return(p)
})
runApp()
runApp()
runApp()
colnames(wa.average.crime)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/info201/a8-data-app-josh3396')
runApp()
runApp()
runApp()
runApp('~/info201/module15-shiny/exercise-2')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
wa.average.crime.select
wa.average.crime.select <- filter(wa.average.crime, county != 'STATE')
runApp()
View(wa.average.crime.select)
runApp()
runApp()
library(plotly)
runApp()
runApp('~/info201/a8-data-app-josh3396')
runApp()
runApp()
runApp()
runApp()
colnames(wa.average.crime)
wa.average.select.crime<- select(wa.average.crime.select, Average_Population,Average_Assult,
Average_Arson, Average_Burglary, Average_Murder, Average_MVT,
Average_Rape, Average_Robbery, Average_Theft)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(wa.average.crime.select)
View(wa.average.crime$1)
View(wa.average.crime[2])
runApp()
runApp()
runApp()
runApp()
select.crime <- select(wa.average.crime.select, input$choice)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
select.crime <- select(wa.average.crime.select, county, input$choice)
select.crime <- select(wa.average.crime.select, county,Average_Arson )
View(select.crime)
select.crime <- select(wa.average.crime.select, input$choice)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/info201/a8-data-app-josh3396')
runApp()
select.crime <- select_(wa.average.crime.select, county, input$choice)
runApp()
View(wa.average.select.crime)
View(wa.average.crime)
wa.average.crime <- read.csv("data/wa.average.crime.csv")
wa.average.crime.select <- filter(wa.average.crime, county != 'STATE')
wa.average.select.crime<- filter(wa.average.crime, county != 'STATE') %>% select(county, Average_Population,Average_Assult,
Average_Arson, Average_Burglary, Average_Murder, Average_MVT,
Average_Rape, Average_Robbery, Average_Theft)
View(wa.average.select.crime)
runApp()
View(wa.average.select.crime)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
