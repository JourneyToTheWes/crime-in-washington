getwd()
setwd("~/info201/crime-in-washington")
getwd()
setwd()
ucr.wa.crime.data <- read.csv("data/ucr.wa.crime.data.csv")
wa.average.crime <- read.csv("data/wa.average.crime.csv")
View(ucr.wa.crime.data)
View(wa.average.crime)
shiny::runApp('~/info201/a8-data-app-josh3396')
runApp('~/info201/a8-data-app-josh3396')
View(diamonds)
runApp('~/info201/a8-data-app-josh3396')
burgl <- range(wa.average.crime$Average_Burglary)
pop <- range(wa.average.crime$Average_Population)
runApp()
shinyUI(fluidPage(
titlePanel(title = "Crime in Washington"),
sidebarLayout(
sidebarPanel(
sliderInput('burglary', label="burglary", min=burgl[1], max=burgl[2], value=burgl),
sliderInput('population', label="population", min= pop[1], max=pop[2], value=pop),
# A slectInput labeled "Facet By", with choices "cut", "clarity" and "color"
selectInput('facet.by', label="Facet By", choices=c('county'))
),
# The `mainPanel()` should have the following reactive outputs:
mainPanel(
# A plotOutput showing a plot based on the user specifications
plotOutput('plot'),
# Bonus: a dataTableOutput showing a data table of relevant observations
dataTableOutput('table')
),
mainPanel(h5("Crime in Washington is different in each county."),
plotOutput('plot'),
dataTableOutput('table')
)
)
))
data <- wa.average.crime %>%
filter(burgl > input$burgl[1] ) %>%
filter(pop > input$sepal.pop[1] )
return(data)
filtered <- reactive({
data <- wa.average.crime %>%
filter(burgl > input$burgl[1] ) %>%
filter(pop > input$sepal.pop[1] )
return(data)
})
output$plot <- renderPlot({
p <- ggplot(data = filtered(), mapping = aes(x = pop, y = burgl, color=county)) +
geom_point() +
facet_wrap(input$facet.by)
if(input$smooth) {
p <- p + geom_smooth(se = FALSE)
}
return(p)
})
runApp()
library(shiny)
library(dplyr)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(diamonds)
runApp('~/info201/module15-shiny/exercise-2')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(iris)
runApp()
runApp()
runApp()
runApp()
runApp()
